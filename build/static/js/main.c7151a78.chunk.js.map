{"version":3,"sources":["components/card/card.jsx","components/writer/writer.jsx","components/input/input.jsx","components/button/button.jsx","components/editor/editor.jsx","components/navbar/navbar.jsx","pages/memepage/memepage.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","clicked","src","url","alt","id","text","Writer","rows","cols","style","position","fontSize","size","color","top","left","value","onChange","changed","type","InputElement","placeholder","Button","isGoogle","children","Editor","onClickHandler","event","htmlToImage","toPng","document","getElementById","then","dataUrl","download","onChangeHandler","state","target","setState","onOtherInputHandler","dupState","handleColorSwatch","statecolor","hex","onInsertText","textCount","nativeEvent","offsetX","offsetY","console","log","options","this","count","j","onDoubleClick","e","map","opt","index","key","triangle","onChangeComplete","React","Component","Navbar","Memepage","search","onMemeHandler","identity","imgurl","preventDefault","textfield","displayMemeEditor","window","scrollTo","onImageUploadHandler","reader","FileReader","file","files","onload","result","readAsDataURL","memes","fetch","res","json","data","filteredmemes","filter","meme","name","toUpperCase","includes","box_count","height","width","App","exact","path","render","withRouter","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c7151a78.chunk.js","sourcesContent":["import React from \"react\";\n\nimport './card.scss';\n\nconst Card = (props) => {\n    return(\n        <div className=\"Card\" onClick={props.clicked} >\n            <img src={props.url} alt={props.id} className=\"Card--Img\" />\n            <div className=\"Card--Content\">\n                <h1 className=\"Card--Title\">{props.text}</h1>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;\n","import React from \"react\";\nimport './writer.scss';\n\nconst Writer = (props) => {\n\n    return(\n            <textarea rows=\"3\" cols=\"15\" className=\"Writer\" onClick={props.clicked} style={{position: 'absolute', fontSize: `${props.size + \"px\"}`, color: props.color, top: props.top, left: props.left}} value={props.value} onChange={props.changed} type=\"text\" />\n    )\n}\n\nexport default Writer;","import React from \"react\";\n\nimport './input.scss';\n\nconst InputElement = (props) => {\n    return(\n        <input className=\"Input\" onChange={props.changed} type={props.type} placeholder={props.placeholder} value={props.value} />\n    )\n}\n\nexport default InputElement;","import React from \"react\";\n\nimport './button.scss';\n\nconst Button = (props) => {\n    return(\n        <button className={`${props.isGoogle ? \"Button--Google\" : ''} Button`} onClick={props.onClick} type={props.type}>\n            {props.children}\n        </button>\n    )\n}\n\nexport default Button;","import React from \"react\";\nimport htmlToImage from 'html-to-image';\nimport download from 'downloadjs';\nimport Writer from '../writer/writer';\nimport Input from '../input/input';\nimport Button from '../button/button';\nimport { TwitterPicker } from 'react-color';\nimport './editor.scss';\n\nclass Editor extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            url: this.props.url,\n            id: this.props.id,\n            options: this.props.options,\n            value : [],\n            top: [],\n            left: [],\n            textCount: 0,\n            color: '',\n            size: ''\n        }\n    }\n\n    onClickHandler = (event) => {\n        htmlToImage.toPng(document.getElementById('meme'))\n        .then(function (dataUrl) {\n            download(dataUrl, 'meme');\n        });\n    }\n\n    onChangeHandler = (event,type) => {\n        let value = this.state.value;\n        value[type] = event.target.value;\n        this.setState({value : value})\n    }\n\n    onOtherInputHandler = (event,type) => {\n        let dupState = this.state;\n        dupState[type] = event.target.value;\n        this.setState({dupState})\n    }\n\n    handleColorSwatch = (color) => {\n        let statecolor = this.state.color;\n        statecolor = color.hex;\n        this.setState({color: statecolor})\n    }\n\n    onInsertText = (event) => {\n        let {left, top, textCount} = this.state;\n        left[textCount] = event.nativeEvent.offsetX;\n        top[textCount] = event.nativeEvent.offsetY;\n        textCount = textCount +1;\n        this.setState({left: left, top:top, textCount: textCount}, () => console.log(this.state));\n    }\n\n    render(){\n        let {id, url, value, textCount, top, left, color, size} = this.state;\n        let count = [];\n        for(let j=0; j<textCount; j++){\n            count[j] = j;\n        }\n\n        return(\n            <div className=\"Editor\">\n                <div id=\"meme\" className=\"Editor--ImgContainer\">\n                    <img src={url} alt={id} className=\"Editor--Img\" />\n                    <div className=\"Editor--ImgInsertText\" onDoubleClick={e => this.onInsertText(e)}>\n                        <div className=\"Editor--ImgInsertTextContainer\">\n                            {\n                                count.map((opt,index) => {\n                                    return(\n                                        <Writer color={color} size={size} key={index} top={top[index]} left={left[index]} changed={event => this.onChangeHandler(event,index)} value={value[index]} />\n                                        )\n                                })\n                            }\n                        </div>\n                    </div>\n                </div>\n                <div className=\"Editor--Content\">\n                    <h1 className=\"Editor--ContentHeadline\">Triple Click to edit the meme!</h1>\n                    <TwitterPicker triangle=\"hide\" onChangeComplete={this.handleColorSwatch}/>\n                    <Input type=\"text\" value={size} placeholder=\"Font Size in pixels\" changed={event => this.onOtherInputHandler(event, \"size\")} />\n                    <Button onClick={e => this.onClickHandler(e)} type=\"submit\">Generate</Button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Editor;","import React from \"react\";\n\nimport './navbar.scss';\n\nconst Navbar = (props) => {\n    return(\n        <div className=\"Navbar\">\n            <h1 className=\"Navbar--Title\">MemeSpot</h1>\n            <div className=\"Navbar--Links\">\n                <input type=\"file\" className=\"Navbar--Links--Link\" onChange={props.clicked} />\n            </div>\n        </div>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\nimport Card from '../../components/card/card';\nimport Editor from '../../components/editor/editor';\nimport './memepage.scss';\nimport Navbar from \"../../components/navbar/navbar\";\n\nclass Memepage extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            memes: [],\n            search: '',\n            id: '',\n            url: '',\n            textfield: '',\n            displayMemeEditor: false\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://api.imgflip.com/get_memes')\n        .then(res => res.json())\n        .then(res => {\n            let memes = res.data.memes;\n            this.setState({memes : memes})\n        })\n    }\n\n    onChangeHandler = (event) => {\n        let search = this.state.search;\n        search = event.target.value;\n        this.setState({search : search})\n    }\n\n    onMemeHandler = (event,identity,imgurl,text) => {\n        event.preventDefault();\n        let id = this.state.id;\n        let url = this.state.url;\n        let textfield = this.state.textfield;\n        let displayMemeEditor = this.state.displayMemeEditor;\n        id = identity;\n        url = imgurl;\n        textfield = text;\n        this.setState({id : id, url:url, textfield : textfield, displayMemeEditor: !displayMemeEditor})\n        window.scrollTo(0,0);\n    }\n\n    onImageUploadHandler = (e) => {\n    \n        let reader = new FileReader();\n        let file = e.target.files[0];\n    \n        reader.onload = () => {\n          this.setState({\n            file: file,\n            url: reader.result,\n            displayMemeEditor: true\n          }, () => console.log(this.state));\n        }\n    \n        reader.readAsDataURL(file)\n      }\n\n    render(){\n\n        let memes = this.state.memes;\n        let search = this.state.search;\n        let filteredmemes = memes.filter(meme => \n            meme.name.toUpperCase().includes(search.toUpperCase())\n        )\n        \n        return(\n            <div className=\"Memepage\">\n                <Navbar clicked={e => this.onImageUploadHandler(e)} />\n                <div className=\"Memepage--Search\">\n                    <h1 className=\"Memepage--SearchHeading\">Generate memes with these trending templates!</h1>\n                    <input type=\"search\" placeholder=\"Search\" value={this.state.search} onChange={event => this.onChangeHandler(event)} className=\"Memepage--SearchBar\" /> \n                </div>\n                {\n                    this.state.displayMemeEditor ? <Editor key={this.state.url} url={this.state.url} id={this.state.id} options={this.state.textfield} /> : null\n                }\n                {\n                    filteredmemes.map(meme => {\n                        return(\n                            <Card url={meme.url} id={meme.id} key={meme.id} clicked={event => this.onMemeHandler(event,meme.id,meme.url,meme.box_count)} height={meme.height} width={meme.width} text={meme.name} textCount={meme.box_count} />\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default Memepage;","import React from 'react';\nimport {Switch, Route, withRouter} from \"react-router-dom\";\nimport Memepage from './pages/memepage/memepage';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n\n    }\n  }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" render={() => {\n            return(\n              <Memepage />\n            )\n          }} />\n        </Switch>\n      </div>\n    );\n  }\n\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}