{"version":3,"sources":["components/card/card.jsx","components/writer/writer.jsx","components/input/input.jsx","components/button/button.jsx","components/editor/editor.jsx","components/navbar/navbar.jsx","pages/memepage/memepage.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","clicked","src","url","alt","id","text","Writer","rows","cols","style","position","fontSize","size","color","top","left","value","onChange","changed","type","InputElement","placeholder","Button","isGoogle","children","Editor","onClickHandler","event","htmlToImage","toPng","document","getElementById","then","dataUrl","download","onChangeHandler","state","target","setState","onOtherInputHandler","dupState","onInsertText","textCount","nativeEvent","offsetX","offsetY","console","log","options","this","count","j","onDoubleClick","e","map","opt","index","key","React","Component","Navbar","Memepage","search","onMemeHandler","identity","imgurl","preventDefault","textfield","displayMemeEditor","window","scrollTo","onImageUploadHandler","reader","FileReader","file","files","onload","result","readAsDataURL","memes","fetch","res","json","data","filteredmemes","filter","meme","name","toUpperCase","includes","box_count","height","width","App","exact","path","render","withRouter","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.29c7bb41.chunk.js","sourcesContent":["import React from \"react\";\n\nimport './card.scss';\n\nconst Card = (props) => {\n    return(\n        <div className=\"Card\" onClick={props.clicked} >\n            <img src={props.url} alt={props.id} className=\"Card--Img\" />\n            <div className=\"Card--Content\">\n                <h1 className=\"Card--Title\">{props.text}</h1>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;\n","import React from \"react\";\nimport './writer.scss';\n\nconst Writer = (props) => {\n\n    return(\n            <textarea rows=\"3\" cols=\"15\" className=\"Writer\" onClick={props.clicked} style={{position: 'absolute', fontSize: `${props.size + \"px\"}`, color: props.color, top: props.top, left: props.left}} value={props.value} onChange={props.changed} type=\"text\" />\n    )\n}\n\nexport default Writer;","import React from \"react\";\n\nimport './input.scss';\n\nconst InputElement = (props) => {\n    return(\n        <input className=\"Input\" onChange={props.changed} type={props.type} placeholder={props.placeholder} value={props.value} />\n    )\n}\n\nexport default InputElement;","import React from \"react\";\n\nimport './button.scss';\n\nconst Button = (props) => {\n    return(\n        <button className={`${props.isGoogle ? \"Button--Google\" : ''} Button`} onClick={props.onClick} type={props.type}>\n            {props.children}\n        </button>\n    )\n}\n\nexport default Button;","import React from \"react\";\nimport htmlToImage from 'html-to-image';\nimport download from 'downloadjs';\nimport Writer from '../writer/writer';\nimport Input from '../input/input';\nimport Button from '../button/button';\nimport './editor.scss';\n\nclass Editor extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            url: this.props.url,\n            id: this.props.id,\n            options: this.props.options,\n            value : [],\n            top: [],\n            left: [],\n            textCount: 0,\n            color: '',\n            size: ''\n        }\n    }\n\n    onClickHandler = (event) => {\n        htmlToImage.toPng(document.getElementById('meme'))\n        .then(function (dataUrl) {\n            download(dataUrl, 'meme');\n        });\n    }\n\n    onChangeHandler = (event,type) => {\n        let value = this.state.value;\n        value[type] = event.target.value;\n        this.setState({value : value})\n    }\n\n    onOtherInputHandler = (event,type) => {\n        let dupState = this.state;\n        dupState[type] = event.target.value;\n        this.setState({dupState})\n    }\n\n    onInsertText = (event) => {\n        let {left, top, textCount} = this.state;\n        left[textCount] = event.nativeEvent.offsetX;\n        top[textCount] = event.nativeEvent.offsetY;\n        textCount = textCount +1;\n        this.setState({left: left, top:top, textCount: textCount}, () => console.log(this.state));\n    }\n\n    render(){\n        let {id, url, value, textCount, top, left, color, size} = this.state;\n        let count = [];\n        for(let j=0; j<textCount; j++){\n            count[j] = j;\n        }\n\n        return(\n            <div className=\"Editor\">\n                <div id=\"meme\" className=\"Editor--ImgContainer\">\n                    <img src={url} alt={id} className=\"Editor--Img\" />\n                    <div className=\"Editor--ImgInsertText\" onDoubleClick={e => this.onInsertText(e)}>\n                        <div className=\"Editor--ImgInsertTextContainer\">\n                            {\n                                count.map((opt,index) => {\n                                    return(\n                                        <Writer color={color} size={size} key={index} top={top[index]} left={left[index]} changed={event => this.onChangeHandler(event,index)} value={value[index]} />\n                                        )\n                                })\n                            }\n                        </div>\n                    </div>\n                </div>\n                <div className=\"Editor--Content\">\n                    <h1 className=\"Editor--ContentHeadline\">Triple Click to edit the meme!</h1>\n                    <Input type=\"text\" value={color} placeholder=\"Choose the color\" changed={event => this.onOtherInputHandler(event, \"color\")} />\n                    <Input type=\"text\" value={size} placeholder=\"Font Size in pixels\" changed={event => this.onOtherInputHandler(event, \"size\")} />\n                    <Button onClick={e => this.onClickHandler(e)} type=\"submit\">Generate</Button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Editor;","import React from \"react\";\n\nimport './navbar.scss';\n\nconst Navbar = (props) => {\n    return(\n        <div className=\"Navbar\">\n            <h1 className=\"Navbar--Title\">MemeSpot</h1>\n            <div className=\"Navbar--Links\">\n                <input type=\"file\" className=\"Navbar--Links--Link\" onChange={props.clicked} />\n            </div>\n        </div>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\nimport Card from '../../components/card/card';\nimport Editor from '../../components/editor/editor';\nimport './memepage.scss';\nimport Navbar from \"../../components/navbar/navbar\";\n\nclass Memepage extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            memes: [],\n            search: '',\n            id: '',\n            url: '',\n            textfield: '',\n            displayMemeEditor: false\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://api.imgflip.com/get_memes')\n        .then(res => res.json())\n        .then(res => {\n            let memes = res.data.memes;\n            this.setState({memes : memes}, () => console.log(this.state))\n        })\n    }\n\n    onChangeHandler = (event) => {\n        let search = this.state.search;\n        search = event.target.value;\n        this.setState({search : search})\n    }\n\n    onMemeHandler = (event,identity,imgurl,text) => {\n        event.preventDefault();\n        let id = this.state.id;\n        let url = this.state.url;\n        let textfield = this.state.textfield;\n        let displayMemeEditor = this.state.displayMemeEditor;\n        id = identity;\n        url = imgurl;\n        textfield = text;\n        this.setState({id : id, url:url, textfield : textfield, displayMemeEditor: !displayMemeEditor})\n        window.scrollTo(0,0);\n    }\n\n    onImageUploadHandler = (e) => {\n    \n        let reader = new FileReader();\n        let file = e.target.files[0];\n    \n        reader.onload = () => {\n          this.setState({\n            file: file,\n            url: reader.result,\n            displayMemeEditor: true\n          }, () => console.log(this.state));\n        }\n    \n        reader.readAsDataURL(file)\n      }\n\n    render(){\n\n        let memes = this.state.memes;\n        let search = this.state.search;\n        let filteredmemes = memes.filter(meme => \n            meme.name.toUpperCase().includes(search.toUpperCase())\n        )\n        \n        return(\n            <div className=\"Memepage\">\n                <Navbar clicked={e => this.onImageUploadHandler(e)} />\n                <div className=\"Memepage--Search\">\n                    <h1 className=\"Memepage--SearchHeading\">Generate memes with these trending templates!</h1>\n                    <input type=\"search\" placeholder=\"Search\" value={this.state.search} onChange={event => this.onChangeHandler(event)} className=\"Memepage--SearchBar\" /> \n                </div>\n                {\n                    this.state.displayMemeEditor ? <Editor key={this.state.url} url={this.state.url} id={this.state.id} options={this.state.textfield} /> : null\n                }\n                {\n                    filteredmemes.map(meme => {\n                        return(\n                            <Card url={meme.url} id={meme.id} key={meme.id} clicked={event => this.onMemeHandler(event,meme.id,meme.url,meme.box_count)} height={meme.height} width={meme.width} text={meme.name} textCount={meme.box_count} />\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default Memepage;","import React from 'react';\nimport {Switch, Route, withRouter} from \"react-router-dom\";\nimport Memepage from './pages/memepage/memepage';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n\n    }\n  }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" render={() => {\n            return(\n              <Memepage />\n            )\n          }} />\n        </Switch>\n      </div>\n    );\n  }\n\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}